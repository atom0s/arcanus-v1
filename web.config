<?xml version="1.0" encoding="utf-8"?>
<configuration>
    <system.webServer>
        <!-- 
        runAllManagedModulesForAllRequests
        
        Disables ASP.NET routing attempts in managed modules. This should be set
        to false for our case. We are allowing nodejs to handle all routing.
        
        Default Value: false
        Recommended Value: false
        -->
        <modules runAllManagedModulesForAllRequests="false" />

        <!--
        IIS Application Initialization
        
        This is used to tell our application a fake request has come in due to
        IIS App Initialization startup. This is invoked when our website first
        comes online and is being told to startup immediately.
        -->
        <applicationInitialization remapManagedRequestsTo="arcanus/arcanus.js" skipManagedModules="true">
            <add initializationPage="arcanus/arcanus.js" />
        </applicationInitialization>
        
        <!--
        handlers
        
        The handlers setup for allowing our iisnode module to handle the incoming
        route requests. This points the requests to our specific server instance.
        
        Recommend Values:
            name    : iisnode
            path    : arcanus.js
            verb    : *
            modules : iisnode
        -->
        <handlers>
            <add name="iisnode" path="arcanus.js" verb="*" modules="iisnode" />
        </handlers>
        
        <!--
        iisnode
        
        Configures the iisnode instance. Allows for tweaking the various settings
        that iisnode offers to ensure the best performance for the server.
        
        For more information on these settings, see:
        https://github.com/tjanczuk/iisnode/blob/master/src/config/iisnode_schema_x64.xml
        
        It is recommended that you leave the settings as-is unless you know what
        you are doing! arcanus is setup to use balanced settings overall.
        
        For production environments, be sure to set the following:
            debugHeaderEnabled  : false
            debuggingEnabled    : false
            devErrorsEnabled    : false
        -->
        <iisnode asyncCompletionThreadCount="0" configOverrides="iisnode.yml" debugHeaderEnabled="false" debuggerPathSegment="debug" debuggerPortRange="5058-6058" debuggerVirtualDir="" debuggingEnabled="false" devErrorsEnabled="false" enableXFF="true" flushResponse="false" gracefulShutdownTimeout="60000" idlePageOutTimePeriod="0" initialRequestBufferSize="4096" logDirectory="logs" loggingEnabled="true" maxConcurrentRequestsPerProcess="2048" maxLogFileSizeInKB="4096" maxLogFiles="20" maxNamedPipeConnectionPoolSize="512" maxNamedPipeConnectionRetry="100" maxNamedPipePooledConnectionAge="30000" maxRequestBufferSize="65536" maxTotalLogFileSizeInKB="10240" namedPipeConnectionRetryDelay="250" nodeProcessCountPerApplication="1" recycleSignalEnabled="false" uncFileChangesPollingInterval="5000" watchedFiles="web.config;*.js;*.html;*.less" />

        <!--
        URLRewrite

        Below are settings for URLRewrite to handle our nodejs application properly
        and forward the requests to our application. It is important that allow requests
        are sent to our main application script (app.js) to ensure proper page loading.

        Additional requests are filtered to allow sub-sites to pass through.

        It is best to not alter these settings unless required for your domain setup.
        -->
        <rewrite>
            <rules>
                <!--
                HTTP To HTTPS Redirect Enforcement
                
                Ensures that requests made to this subdomain are forced to use HTTPS.
                Applications running should also have their own method of enforcement to prevent
                non-secure connections from being established!
                -->
                <rule name="HTTP To HTTPS Redirect" stopProcessing="true">
                    <match url="(.*)" />
                    <conditions>
                        <add input="{HTTP_X_FORWARDED_PROTO}" pattern="^http$" />
                        <add input="{QUERY_STRING}" pattern=".*(/\.well-known/).*" />
                    </conditions>
                    <action type="Redirect" redirectType="Found" url="https://{HTTP_HOST}/{R:1}" />
                </rule>
                
                <!--
                Maintenance Mode
                
                Allows the domain to be put in a state that is blocked by outside access while being
                worked on locally or with one of the given remote IP addresses. Others will be redirected
                to the given URL as a means to show the site is undergoing maintenance.
                -->
                <rule name="Maintenance Mode" enabled="false" patternSyntax="Wildcard" stopProcessing="true">
                    <match url="maintenance.php" negate="true" />
                    <conditions>
                        <add input="{URL}" pattern="*" />
                        <add input="{HTTP_X_FORWARDED_FOR}" pattern="66.171.252.232" negate="true" />
                        <add input="{HTTP_X_FORWARDED_FOR}" pattern="localhost" negate="true" />
                        <add input="{HTTP_X_FORWARDED_FOR}" pattern="127.0.0.1" negate="true" />
                        <add input="{HTTP_X_FORWARDED_FOR}" pattern="50.37.*.*" negate="true" />
                    </conditions>
                    <action type="Redirect" url="https://devbeta.kupoffxi.com/maintenance.php" redirectType="Temporary" />
                </rule>
                
                <!-- 
                Arcanus Specific Rules
                
                Do not edit the below rules, these are required for Arcanus to function properly!
                -->
                
                <!-- Allows SSL sub-directories to pass through. -->
                <rule name="arcanusSSLBypass" stopProcessing="true">
                    <match url="^\.well-known/" />
                </rule>

                <!-- Allows forum sub-directories to pass through. -->
                <rule name="arcanusForumBypass" stopProcessing="true">
                    <match url="^forum(s)?/" />
                </rule>

                <!-- Allows wiki sub-directories to pass through. -->
                <rule name="arcanusWikiBypass" stopProcessing="true">
                    <match url="^wiki/" />
                </rule>

                <!-- Allows iisnode inspector tool to work. -->
                <rule name="arcanusInspectorBypass" patternSyntax="ECMAScript" stopProcessing="true">
                    <match url="arcanus/arcanus.js\/debug[\/]?" />
                </rule>

                <!-- Allows static content requests to be obtained. -->
                <rule name="arcanusStaticContent">
                    <action type="Rewrite" url="arcanus/public{REQUEST_URI}" />
                </rule>

                <!-- Route all other requests to our main server file. -->
                <rule name="arcanusDynamicContent">
                    <conditions>
                        <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="arcanus/arcanus.js" />
                </rule>
            </rules>
        </rewrite>
        <!--
        Allow Double Escaping
        
        Prevent IIS from blocking requests that contain symbols that may be considered
        harmful or assumed to be double escaping to attempt exploits. This prevents requests 
        from including characters such as + and so on if disabled.
        -->
        <security>
            <requestFiltering allowDoubleEscaping="true" />
        </security>
        <!--
        Custom Mime Mappings
        
        Used for SSL certification requests and auto-renewel. Auto-generated files for this task
        do not contain any extension and instead should be served as plain text. This can pose a risk
        to leaking data on other files without extensions! Do not host these files in any public known area!
        -->
        <staticContent>
            <mimeMap fileExtension="." mimeType="text/plain" />
        </staticContent>
        <httpErrors errorMode="Detailed" />
    </system.webServer>
</configuration>